[{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/3-configurationml-style/3.1-createlambda/","title":"Create Lambda Function check the log waf","tags":[],"description":"","content":"Target: Lambda will receive logs from WAF (Cloudwatch Logs or Kinesis), analysis and detect signs of attack based on custom logic or rule. started Go to Lambda Console: Access [AWS Lambda Console] (https://console.aws.amazon.com/lambda/home?region=us-East-1)\nClick Create A Function ! [Connectprivate] (/images/3.Connect/pic01.png)\nAfter displaying, select creating methods including:\nAuthor from scratch Function name: waf-ml-detection Runtime: Python 3.10 (hoặc Node.js) Architecture: x86_64 Permissions: Choose Create a new role with basic Lambda permissions. Choose Create function "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/2-prerequiste/2.1-createwebsample/2.1.1-createdistributions/","title":"Creating CloudFront Distributions for S3 static web","tags":[],"description":"","content":"Creating CloudFront distribution Open CloudFront service In the AWS Management Console, find CloudFront → Create Distribution. Specify Origin Origin type: Select Amazon S3. Origin domain: Select the created Bucket S3. If the bucket has enabled the website Hosting website → press Use website endpoint so that CloudFront serves the correct index.html file. Allow Private S3 Bucket Access to CloudFront: Turn over if you want to limit access to only via CloudFront. Cache \u0026amp; Security configuration Viewer Protocol Policy: Redirect http to https. Default Root Object: Index.html. skip the Enable Security step if you want to save money In step Enable Security (WAF): Select Do not Enable Security Protections to not attach WAF. Later, go to the AWS WAF Console to attach WebaCl when tested. Create a distribution Press Create Distribution. Wait for the state deployed. "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/2-prerequiste/2.1-createwebsample/","title":"Creating S3 Static Website","tags":[],"description":"","content":"Starting S3 Bucket Access AWS Management Console\nLog in with your account.\nAfter logging in, you will transfer users to the main page of AWS Manage Console as shown:\nFind and open services S3.\nPress Create Bucket at the homepage and fill out the following information: ! [ConnectPrivate] (/images/2.prerequisite/pic04.png)\nAWS Region Choose the same Region with WAF (e.g. US-EAST-1) Bucket name waf-demo-yourname In the section Object Ownership, we choose ACLs disabled (recommended).\nNext, In section Block Public Access settings:\nUncheck Block all public access. Check I acknowledge that the current settings might result in this bucket and the objects within becoming public. Keep the same default settings, then press Create Bucket.\nUpload file INDEX.HTML Create file INDEX.HTML with basic content: \u0026lt;! Doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;btle\u0026gt; WAF Demo \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt; Hello waf! \u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/tml\u0026gt; Access the newest created bucket → Click Upload. Select the file index.html and click Upload. Turn on Static Website Hosting In the bucket, open the tab ** Properties **\nRoll down to the website Hosting website → press ** edit **.\nSelect ** Enable **.\nIn the hosting section, select Host A Static website.\nINDEX Document: Enter index.html.\nClick Save Changes.\nCopy the endpoint URL displayed.\nGranting public access Go to Bucket\u0026rsquo;s Permissions tab. Roll down at the Bucket Policy, click Edit and paste the following policy, change by your bucket name: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadgetobject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;S3: Getobject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;RNA: AWS: S3 ::: \u0026lt;Your-Bucket-name\u0026gt;/*\u0026#34; \u0026#34; } ] } Press Save changes. Check access: Return the browser via Endpoint URL that you have created earlier, if you see the content \u0026ldquo;Hello waf!\u0026rdquo; Means you have succeeded.\n"},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/1-introduce/","title":"Introduction","tags":[],"description":"","content":"Web Application Firewall (WAF) is a service of Amazon Web Services (AWS) that allows users to protect web applications from online attacks by blocking unwanted or malicious requirements before they reach the web application. WAF AWS can identify and block unwanted or malicious web requirements such as DDOS, SQL Injection, Cross-Site scripting (XSS) and other attacks. WAF AWS works by using security rules to analyze requirements to web applications and block requirements that are not consistent with that rule.\nUsing Web Application Firewall (WAF) provides users with many security features, including:\nProtect against DDOS attacks, SQL Injection, XSS and other attacks. Configure flexible security rules to suit the security needs of the business. Integrated with other AWS services such as Amazon CloudFront, AWS Application Load Balancer, AWS Elastic Beanstalk, AWS API Gateway to provide a comprehensive security solution for web applications. Monitoring and reporting features to help users manage attacks and ensure the stability and performance of the web application. "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/","title":"Session Management","tags":[],"description":"","content":"Web Application Firewall (WAF) using Machine Learning Rules Overall In this lab, you\u0026rsquo;ll learn how to deploy AWS WAF with ML Rules to protect the application, track traffic and check the ability to detect attacks.\nContent Introduction Preparation Connect to EC2 instance Manage session logs Port Forwarding Clean up resources "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/4-ruleswaf/4.1-ratelimiting/","title":"Setting Rate Limiting Rule","tags":[],"description":"","content":"Target Limit the number of requests from the same IP over a certain period of time to reduce the load and prevent the attack of Brute-Force or BOT Traffic. Set on AWS Console Go AWS WAF \u0026amp; Shield in AWS Management Console. Select WebaCl that you want to add rule. Select Add rules → Add my own rules and rule groups. Name Rule: Ratelimit-Api. Select Rate-based Rule. Configuration: Limited: 2000 Requests / 5 minutes / IP. Aggregate key: ip. Scope-down: Applies to Uri Path /API/ /Login. Action: Count for monitoring before blocking. Enable Cloudwatch Metrics and Sampled Requests. Save and Deploy. "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/2-prerequiste/2.2-createwafwebacl/","title":"Create WAF WebaCl and assign to Resource","tags":[],"description":"","content":"Create a WebACL Back to the AWS Console homepage and open AWS WAF Console ![Connectprivate] (/images/2.prerequisite/pic14.png) Next, select WebACls and click Create Webacl ![Connectprivate] (/images/2.prerequisite/pic13.png) -WebACL name: Example: ML-WAF-DEMO.\nAdd AWS Resources → Select Resource you want to protect (select CloudFront Distribution that we have created earlier).\nRules: temporarily leave empty (will add in the next step).\nDefault Action: Allow.\nComplete WebACL creation. ! [Connectprivate] (/images/2.prerequisite/pic15.png)\n! [Connectprivate] (/images/2.prerequisite/pic16.png)\n! [Connectprivate] (/images/2.prerequisite/pic17.png)\n"},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/2-prerequiste/","title":"Preparation ","tags":[],"description":"","content":"In this section, you will create a demo environment to be ready to deploy smart WAF, including:\nSample web application for WAF to protect (S3 or EC2). AWS WAF Webacl to block dangerous access. Cloudwatch Log Group to record security events from WAF To learn how to create EC2, S3, \u0026hellip; you can refer to the Lab:\nIntroduction to Amazon EC2 Working with Amazon S3 Working with Amazon WAF Introduction to Amazon Lambda Content Creating S3 Static Website Create WAF WebaCl and assign to Resource Turn on logging and create Log Group "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/4-ruleswaf/4.2-geoblocking/","title":"Setting Geo-Blocking Rule","tags":[],"description":"","content":"Target Limit or block access from high -risk countries/territories not to serve the market. Set on AWS Console In WebaCl, select Add Rules → Add My Own Rules and Rule Groups. Name Rule: Geoblock-Highrisk. Select geo match. Add Country Codes to Block: Example [\u0026quot; ru \u0026quot;,\u0026quot; CN \u0026quot;,\u0026quot; KP \u0026quot;] `. If you need a valid Whitelist IP from this country, create IPSet Whitelist and use not statement. Action: Count to monitor. Enable Cloudwatch Metrics and Sampled Requests. Save and Deploy. "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/3-configurationml-style/3.2-subscribelambda/","title":"Subscribe Lambda with log group","tags":[],"description":"","content":" Through this access link to return to Cloudwatch Console page: CloudWatch Console\nFind log group that you configured in the previous step for waf Select Log Group → Actions → Create Subscribe Filter. Choose the following items including:\nDestination: Lambda Function -Lambda: WAF-ML-DETACTION -Name Subscribe Filter Name: Waf-Logs-to-Lambda Filter Pattern: Leave empty (means send all log).\nConfirm and create success. "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/3-configurationml-style/","title":"Configuration &#39;ml-style&#39; detection","tags":[],"description":"","content":"In this step, we will perform the stages including:\nCollect and analyze the log from the characteristic extract (features) from the requests. Train or apply ML model to identify attacks. Create dynamic waf law (dynamic rules) based on ML results. Content 3.1. Create Lambda Function check the log waf 3.2. Subscribe Lambda with log group\n"},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/2-prerequiste/2.3-turnonloggingcreateloggroup/","title":"Turn on logging and create Log Group","tags":[],"description":"","content":"Target: Record log request to Cloudwatch Logs so that later use ML analysis model.\nGo back to AWS WAF Console → WebACls\nSelect the webacl you just created.\nAfter showing the webaCl information that you have created the item logging and metrics\nSelect Enable in the right corner\nSelect Logging Destination\nSelect Cloudwatch logs (most popular) ! [Connectprivate] (/images/2.prerequisite/pic20.png)\nIf there is no log group:\nOpen a new tab into Cloudwatch → Log Groups → Create Log Group.\nName (for example:/AWS/WAF/ML-WAF-Logs). ! [Connectprivate] (/images/2.prerequisite/pic21.png)\nBack to the WAF screen, select Log Group just created.\nClick Save and you have successfully enabled logging ! [Connectprivate] (/images/2.prerequisite/pic22.png)\n"},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/4-ruleswaf/","title":"Add Custom Rules to WAF","tags":[],"description":"","content":"Target Additional custom rules to increase the ability to detect and block advanced attacks that ML model has not caught. Combining Rate Limited, Geo-Blocking, and custom Rule (ReGEX, IPset, Header Anomaly) to minimize risks. Minimize False Positives, ensuring the system performance is not significantly affected. Content: Setting Rate Limiting Rule Setting Geo-blocking Rule "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/5-portfwd/","title":"Test &amp; Validation","tags":[],"description":"","content":"Target Check out Rate Limited Rule and Geo-Blocking Rule have worked as designed. Make sure not to affect users. CONCEPTS RATE LIMITING RULE Use the tool ab (Apache Benchmark) or hey to send 3000 request within 5 minutes to endpoint /API/Login. Expect: Request exceeds 2000/5 minutes from the same IP will be match rule and log log. Because in the Count mode, the request is still returned but will see the log match in Cloudwatch. In case of Geo-Blocking Rule test Use VPN to choose IP from the country in the block list (Example: RU). Send Request to the homepage or endpoint /api/data. Expected: Request from IP of that country will be Match Geo-Blocking Rule and write log. In the Count mode, there is still a response but an entry log. "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/6-cleanup/","title":"Clean up resources","tags":[],"description":"","content":"Delete S3 bucket Go to S3 service management console\nClick on the S3 bucket we created Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket.\nDelete Web ACLs Go to WAF \u0026amp; SHIELD Management Console Click WebACLs and choose webacls we created Click Delete, enter delete to confirm deleting the WebACL (you must Disassociate it from CloudFront before it can be deleted). Delete Log Group CloudWatch Select the created log groups Click the Actions menu Select delete log group(s) Confirm Delete Delete Lambda Go to Lambda Management Console Click on Functions Click function we created Click Actions Choose delete Fill confirm to confirm for deleting Delete ClouFront Distribution Go to CloudFront Management Console Click on Distributions menu Click on distribution created Click Disable (Must be disabled before delete distribution) Click Delete "},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://minhthuanaz.github.io/FCJ-Workshop/tags/","title":"Tags","tags":[],"description":"","content":""}]